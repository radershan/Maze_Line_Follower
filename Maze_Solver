/**** Line Maze Follower v1.0 By Radershan. S ****/

/* for start the robot*/
bool start = false; 

/* Define motor controll inputs */
const int motorRPin1 = 4; // signal pin 1 for the right motor, connect to IN1               
const int motorRPin2 = 2;  // signal pin 2 for the right motor, connect to IN2
const int motorREnable = 3; // enable pin for the right motor, PWM enabled

const int motorLPin1 = 8; // signal pin 1 for the left motor, connect to IN3            
const int motorLPin2 = 10; // signal pin 2 for the left motor, connect to IN4
const int motorLEnable = 9; // enable pin for the left motor, PWM enabled

/* Define the pins for the IR receivers */
const int irPins[6] = {A0, A1, A2, A3, A4,A5};

// an array to hold values from analogRead on the ir sensor (0-1023)
int irSensorAnalog[6] = {0,0,0,0,0,0};

// an array to hold boolean values (1/0) for the ir sensors, based on the analog read and the predefined treashold
int irSensorDigital[6] = {0,0,0,0,0,0}; 

// the value above which we determine an IR sensor reading indicates the sensor is over a line
int treashold = 700; 

// binary representation of the sensor reading from left to right
int irSensors = B000000; 

// last reading of ir sensors
int irSensorsL = B000000; 

// a score to determine deviation from the line [-180 ; +180]. Negative means the robot is left of the line.
int error = 0;

//  store the last value of error
int errorLast = 0;  

// a coorection value, based on the error that is used to change motor speed with PWM
int correction = 0; 


/* Set up maximum speed and speed for turning (to be used with PWM) */
  // PWM to control motor speed [0 - 151]
int maxSpeed = 151; 

/* variables to keep track of current speed of motors */
int motorLSpeed = 0;
int motorRSpeed = 0;

/*variables for shortest path*/
const int pathLen = 100;
char path[pathLen];
char sPath[pathLen];
int pointer = 0;
int sPointer = 0;
int refPointer =0;
bool pathShortend = false;
bool button = false;
const int sDrive = 6;

//constant for buzzer;
const int SPKR = 12;

void setup() {
Serial.begin(9600); 
  /* Set up motor controll pins as output */
  pinMode(motorLPin1,OUTPUT);        
  pinMode(motorLPin2,OUTPUT);
  pinMode(motorLEnable,OUTPUT);
  
  pinMode(motorRPin1,OUTPUT);        
  pinMode(motorRPin2,OUTPUT);
  pinMode(motorREnable,OUTPUT);
   
  /* Set-up IR sensor pins as input */
  for (int i = 0; i < 5; i++) {
    pinMode(irPins[i], INPUT);
  }
  
  /* Set-up button as input */
  pinMode(sDrive,INPUT);
  /* Set-up speaker as input */
  pinMode(SPKR, OUTPUT);
}

void loop() {
 Serial.print("Running...    ");
 //Robots starting status
 if (start == false){
    starting();
    start = true;
    buzzer();
 }
 //While solving maze
 else if (pathShortend == false){
  Serial.print("On Fining Maze.....   ");
  Scan();
  UpdateError();
 }
 //while drive through shrotest path
 else if (pathShortend == true && button ==true){
  starting();
  refPointer = pointer;
  while(true){
  Serial.print("On Shortest Path.....   ");
  Scan();
  sPathError();
  }
  }
 //check the button status
 else if (digitalRead(sDrive) == HIGH){
  button = true;
  digitalWrite(13,LOW);
  }
 
}

void Scan() { // Initialize sensors & read sensors

  //to avoid unwanted readings
  if (irSensors == B100000 || irSensors == B000001 || irSensors == B110000 || irSensors == B011000 || irSensors == B001100 || irSensors == B000110 || irSensors == B000011 || irSensors == B111100 || irSensors == B001111 || irSensors == B111110 || irSensors == B011111 || irSensors == B111111 || irSensors == B000000){
    irSensorsL = irSensors;
  }
  
  irSensors = B000000;
    
  for (int i = 0; i <= 5; i++) {
    irSensorAnalog[i] = analogRead(irPins[i]);
    if (irSensorAnalog[i] <= treashold) {
        irSensorDigital[i] = 0;
    }
    else {irSensorDigital[i] = 1;}
        int b = 5-i;
      irSensors = irSensors + (irSensorDigital[i]<<b);
    } 
    
    Serial.print(irSensors,BIN);
    Serial.print("\t");  
}

void UpdateError() {   // Takes decisions according to Scan();
  
  switch (irSensors) {
    
    // no sensor
    case B000000:
    if (irSensorsL == B100000 ){
            error = -150;
            straight();
       }
    else if (irSensorsL == B000001 ){
            error = 150;
            straight();
       }
    else{
          hardStop();
          buzzer();
          turnAround(); // 1
       }
    break;
    
    //one Sensor
    case B100000: // leftmost sensor on the line
       error = -150;
       straight();
       break;
   
    case B000001: // rightmost sensor on the line
       error = 150;
       straight();
       break;
       
/* 2 Sensors on the line */         
     
     case B110000:
       error = -100;
       straight();
       //Serial.println("110000"); 
       break;

    case B011000:
      error = -50;
      straight();
      break;

    case B001100: 
      error = 0;
      straight(); 
      break;

    case B000110:
        error = 50;
        straight();
        break;
    
    case B000011:
       error = 100;
       straight();
       break;  
       
       
/* 4 Sensors on the line */       
     case B111100: 
       hardStop();
       buzzer();
       turnLeft();
       break;
       
     case B001111:    
       hardStop();
       buzzer();
       Scan();
       if (irSensors == B001100){
          error =0;
          path[pointer++] ='S';
          straight();
        }
       else if (irSensors == B011000){
          error =-50;
          path[pointer++] ='S';
          straight();
        }
       else if (irSensors == B000110){
          error =50;
          path[pointer++] ='S';
          straight();
        }
       else if (irSensors == B000000){
          
          turnRight();
        } 
       else{
           error =0;
          path[pointer++] ='S';
          straight();
        }
       break;
   

/* 5 Sensors on the line */      
  
    case B111110: 
      hardStop();
      buzzer();
      turnLeft();
    break;
      
    case B011111:
     hardStop();
     buzzer();
       Scan();
       if (irSensors == B001100){
          error =0;
          path[pointer++] ='S';
          straight();
        }
       else if (irSensors == B011000){
          error =-50;
          path[pointer++] ='S';
          straight();
        }
       else if (irSensors == B000110){
          error =50;
          path[pointer++] ='S';
          straight();
        }
       else if (irSensors == B000000){
          
          turnRight();
        } 
       else{
           error =0;
          path[pointer++] ='S';
          straight();
        }
     break;
      
     case B111111:
        hardStop();
        buzzer();
        Scan();
       if (irSensors == B111111){
        hardStop();
        buzzer();
        delay(1000);
        buzzer();
        shortestPath();
        }
       else{
          turnLeft();
        } 
       break;
   
     default:
     error = errorLast;
     straight();
  }
}

void UpdateCorrection() {//Set drive speed according to decisions

  if (error >= 0 && error < 50) {
    correction = 0;
  }
  
  else if (error >=50 && error < 100) {
    correction = 50;
  }
  
  else if (error >=100 && error < 150) {
    correction = 100;
  }
   
  else if (error >=150) {
    correction = 150;
  }

  if (error <= 0 && error > -50) {
    correction = 0;
  }
  
  else if (error <= -50 && error > -100) {
    correction = -50;
  }
  
  else if (error <= -100 && error > -150) {
    correction = -100;
  }

  else if (error <= -150) {
    correction = -151;
  }
  
  if (correction >= 0) {
    motorRSpeed = maxSpeed - correction;
    motorLSpeed = maxSpeed;
  }
  
  else if (correction < 0) {
    motorRSpeed = maxSpeed;
    motorLSpeed = maxSpeed + correction;
  }
}

void Drive() {//Drive According to Speed
  if (motorRSpeed > 151) {motorRSpeed = 151;}
  else if (motorRSpeed < -151) {motorRSpeed = -151;}
  
  if (motorLSpeed > 151) {motorLSpeed = 151;}
  else if (motorLSpeed < -151) {motorLSpeed = -151;}
  
  if (motorRSpeed > 0) { // right motor forward (using PWM)
     analogWrite(motorREnable, motorRSpeed);
     digitalWrite(motorRPin1, HIGH);
     digitalWrite(motorRPin2, LOW);
  } 
  
  else if (motorRSpeed < 0) {// right motor reverse (using PWM)
     analogWrite(motorREnable, abs(motorRSpeed));
     digitalWrite(motorRPin1, LOW);
     digitalWrite(motorRPin2, HIGH);
  } 
  
  else if (motorRSpeed == 0) { // right motor fast stop
     digitalWrite(motorREnable, HIGH);
     digitalWrite(motorRPin1, HIGH);
     digitalWrite(motorRPin2, HIGH);
  }
  
  if (motorLSpeed > 0) { // right motor forward (using PWM)
     analogWrite(motorLEnable, motorLSpeed);
     digitalWrite(motorLPin1, HIGH);
     digitalWrite(motorLPin2, LOW);
  } 
  
  else if (motorLSpeed < 0) { // right motor reverse (using PWM)
     analogWrite(motorLEnable, abs(motorLSpeed));
     digitalWrite(motorLPin1, LOW);
     digitalWrite(motorLPin2, HIGH);
  } 
  
    else if (motorLSpeed == 0) { // left motor fast stop
     digitalWrite(motorLEnable, HIGH);
     digitalWrite(motorLPin1, HIGH);
     digitalWrite(motorLPin2, HIGH);
  }
}

/*4 Decesions of Robot*/
void turnLeft(){
  path[pointer++] ='L';
  Serial.println("Turnig Left");
  while (irSensors!=B110000 ){
    motorRSpeed = maxSpeed;
    motorLSpeed = 0;
    Drive();
    Scan();
    }
  }
  

void turnRight(){
  path[pointer++] ='R';
  Serial.println("Turnig Right");
  while (irSensors!=B000011 ){
    motorRSpeed = 0;
    motorLSpeed = maxSpeed;
    Drive();
    Scan();
    }
  hardStop();
  }
  

void turnAround(){
  path[pointer++] ='B';
  Serial.println("Turnig Around");
  while (irSensors!=B000011 ){
    motorRSpeed = -maxSpeed;
    motorLSpeed = maxSpeed;
    Drive();
    Scan();
    }
  hardStop();
  }

void straight(){
  
  Serial.println("Going Straight");
  UpdateCorrection();
  Drive();
}  

/*Stops robot immediatly*/
void hardStop(){
  Serial.println("Stoping Hardly");
    motorRSpeed = 0;
    motorLSpeed = 0;
    Drive(); 
  Serial.println("Start Delaying");
    delay(500);
  Serial.println("End Delaying");
  }

/*Find a charactor in an array*/
bool charFind(char path[],int pointer, char c){
  for (int i =0; i<pointer;i++){
    if (path[i] == c){
      return true;
      }
    }
  return false;
  }

/*Shortest Path */
void shortestPath(){
  while (charFind(path,pointer, 'B')){
    char tempPath[pathLen];
    int tempPoint =0;
    int i =0;
    while (i<pointer){
      if (path[i]=='B'){
        if (tempPath[tempPoint-1]=='L'){
          //LBL
          if (path[i+1]=='L'){
              Serial.println("--LBL--");
              tempPath[tempPoint-1]='S';
            }
          //LBR
          else if (path[i+1]=='R'){
              Serial.println("--LBR--");
              tempPath[tempPoint-1]='B';
            }
          //LBS
          else if (path[i+1]=='S'){
              Serial.println("--LBS--");
              tempPath[tempPoint-1]='R';
            }
          }
         else if (tempPath[tempPoint-1]=='S'){
          //SBL
          if (path[i+1]=='L'){
              Serial.println("--SBL--");
              tempPath[tempPoint-1]='R';
            }
          //SBS
          else if (path[i+1]=='S'){
              Serial.println("--SBS--");
              tempPath[tempPoint-1]='B';
            }
          }
         else{
            //RBL
          if (path[i+1]=='L'){
              Serial.println("--RBL--");
              tempPath[tempPoint-1]='B';
            }
          }
        i = i+2;
        }
      else{
        tempPath[tempPoint++] = path[i];
        i++;
        }
      }
     
    for (int k =0; k<tempPoint; k++){
        path[k] = tempPath[k];
      }
    pointer = tempPoint;
    }
    Serial.println("Shortest Path.........................");
    for (int j =0 ; j<pointer; j++){
      Serial.print(path[j]);
      sPath[j] = path[j] ;
      }
    pathShortend = true;
    digitalWrite(13,HIGH);
  }


/* Error on Shortest Path */
void sPathError() {  
  switch (irSensors) {
    //one Sensor
    case B100000: // leftmost sensor on the line
       error = -150;
       straight();
      // Serial.println("100000"); 
       break;
   
    case B000001: // rightmost sensor on the line
       error = 150;
       straight();
       //Serial.println("000001"); 
       break;
       
/* 2 Sensors on the line */         
     
     case B110000:
       error = -100;
       straight();
       //Serial.println("110000"); 
       break;

    case B011000:
      error = -50;
      straight();
      //Serial.println("011000"); 
      break;

    //changed for maze properties
    case B001100: 
          error = 0;
          straight(); 
       break;

    case B000110:
        error = 50;
        straight();
        //Serial.println("000110"); 
        break;
    
    case B000011:
       error = 100;
       straight();
       //Serial.println("000011"); 
       break; 
/* 4 Sensors on the line */       
     case B111100:
       hardStop();
       sPathCorrection();
       break;
       
     case B001111:
       hardStop();
       sPathCorrection();
       break;
   

/* 5 Sensors on the line */      
  
    case B111110:
     hardStop();
     sPathCorrection();
     break;
      
    case B011111:
     hardStop();
     sPathCorrection();
     break;
      
     case B111111:
       hardStop();
       sPathCorrection();
       break;
   
  } 
}   

void sPathCorrection(){
  char dir = sPath[sPointer++];
  
  if(sPointer <= refPointer ){
  Serial.println(dir);
  switch(dir){
    case 'S':
      error = 0;
      straight();
    break;

    case 'R':
       turnRight();
    break;

    case 'L':
      turnLeft();
    break;
    }
  }
  else{
  buzzer();
  hardStop();
  }
  }

/*Buzzer function */
void buzzer(){
  for (int i=0; i<250; i++) {  // generate a 1KHz tone for 1/2 second
 digitalWrite(SPKR, HIGH);
 delayMicroseconds(1000);
  digitalWrite(SPKR, LOW);
  delayMicroseconds(500);
 }
  }

/* robot starting function*/
void starting(){
  Serial.print("Starting...    ");
  Scan();
  while(irSensors == B111111){
        motorRSpeed = maxSpeed;
        motorLSpeed = maxSpeed;
        Drive();
        Scan();
    }
  }
